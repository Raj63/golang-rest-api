// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/infrastructure/repository/menu.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	menu "github.com/Raj63/golang-rest-api/pkg/domain/menu"
	repository "github.com/Raj63/golang-rest-api/pkg/infrastructure/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockMenus is a mock of Menus interface.
type MockMenus struct {
	ctrl     *gomock.Controller
	recorder *MockMenusMockRecorder
}

// MockMenusMockRecorder is the mock recorder for MockMenus.
type MockMenusMockRecorder struct {
	mock *MockMenus
}

// NewMockMenus creates a new mock instance.
func NewMockMenus(ctrl *gomock.Controller) *MockMenus {
	mock := &MockMenus{ctrl: ctrl}
	mock.recorder = &MockMenusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenus) EXPECT() *MockMenusMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMenus) Create(ctx context.Context, newMenu *menu.Menu) (*menu.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, newMenu)
	ret0, _ := ret[0].(*menu.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMenusMockRecorder) Create(ctx, newMenu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMenus)(nil).Create), ctx, newMenu)
}

// Delete mocks base method.
func (m *MockMenus) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMenusMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMenus)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockMenus) GetAll(ctx context.Context, page, limit int64) (*repository.PaginationResultMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page, limit)
	ret0, _ := ret[0].(*repository.PaginationResultMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMenusMockRecorder) GetAll(ctx, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMenus)(nil).GetAll), ctx, page, limit)
}

// GetByID mocks base method.
func (m *MockMenus) GetByID(ctx context.Context, id int64) (*menu.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*menu.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMenusMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMenus)(nil).GetByID), ctx, id)
}

// GetByTopCount mocks base method.
func (m *MockMenus) GetByTopCount(ctx context.Context, count int) ([]menu.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTopCount", ctx, count)
	ret0, _ := ret[0].([]menu.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTopCount indicates an expected call of GetByTopCount.
func (mr *MockMenusMockRecorder) GetByTopCount(ctx, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTopCount", reflect.TypeOf((*MockMenus)(nil).GetByTopCount), ctx, count)
}

// GetTotalCount mocks base method.
func (m *MockMenus) GetTotalCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCount indicates an expected call of GetTotalCount.
func (mr *MockMenusMockRecorder) GetTotalCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCount", reflect.TypeOf((*MockMenus)(nil).GetTotalCount), ctx)
}
